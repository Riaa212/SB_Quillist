	private static String publicKey64="";
	private static String privateKey64="";
	
	static KeyPairGenerator keyPairGenerator;
	
	static {
    try {
        // Initialize Key Pair Generator
        keyPairGenerator = KeyPairGenerator.getInstance("AES");
        keyPairGenerator.initialize(2048);
//        return key;
        // Generate Key Pair
        KeyPair keyPair = keyPairGenerator.generateKeyPair();
        byte[] publicKeyByte = keyPair.getPublic().getEncoded();
        publicKey64 = Base64.getEncoder().encodeToString(publicKeyByte);
        System.err.println("public key=========>"+publicKey64);
        
        byte[] privateKeyByte = keyPair.getPrivate().getEncoded();
        privateKey64=Base64.getEncoder().encodeToString(privateKeyByte);
        System.err.print("private key========>"+privateKey64);
        
        // Store the keys in separate files
        try (FileOutputStream publicKeyFile = new FileOutputStream("public.key");
             FileOutputStream privateKeyFile = new FileOutputStream("private.key")) {
            // Write public key to file
            byte[] publicKeyBytes = keyPair.getPublic().getEncoded();
            publicKeyFile.write(publicKeyBytes);
            // Write private key to file
            byte[] privateKeyBytes = keyPair.getPrivate().getEncoded();
            privateKeyFile.write(privateKeyBytes);

            // Convert keys to Base64 and print them
            String publicKeyBase64 = Base64.getEncoder().encodeToString(publicKeyBytes);
            System.out.println("Public Key: " + publicKeyBase64);
            String privateKeyBase64 = Base64.getEncoder().encodeToString(privateKeyBytes);
            System.out.println("Private Key: " + privateKeyBase64);

        } catch (Exception e) {
            e.printStackTrace();
        }

    } catch (NoSuchAlgorithmException e) {
        e.printStackTrace();
    }
	}
	=======================
	//encrypt data
	@PostMapping("/publicKey")
	public String encrypt(@RequestBody BlogEntity blog) throws Exception {
		
		//data
//		String data="Hello";
		
	    PublicKey publicKey = getPublicKey(publicKey64);
	    
	    Cipher cipher = Cipher.getInstance("AES");
	    
	    cipher.init(Cipher.ENCRYPT_MODE, publicKey);
	    
//	     Object newInstance = Array.newInstance(BlogEntity.class.componentType());
//	    
//	     System.err.println(newInstance);
	    
	    byte[] encryptedBytes = cipher.doFinal(blog.getTitle().getBytes(StandardCharsets.UTF_8));
	     
	    return Base64.getEncoder().encodeToString(encryptedBytes);
	    
	  }
	
	private PublicKey getPublicKey(String publicKeyStr) throws Exception {
	    byte[] publicKeyBytes = Base64.getDecoder().decode(publicKeyStr);
	    X509EncodedKeySpec keySpec = new X509EncodedKeySpec(publicKeyBytes);
	    KeyFactory keyFactory = KeyFactory.getInstance("AES");
	    return keyFactory.generatePublic(keySpec);
	  }
	
	@PostMapping("/dcrypt")
	public String decrypt(@RequestBody BlogEntity blog) throws Exception {
//		System.err.println();
        PrivateKey privateKey = getPrivateKey(privateKey64);
        Cipher cipher = Cipher.getInstance("AES");
        
        
       
        cipher.init(Cipher.DECRYPT_MODE, privateKey);
        byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(blog.getTitle().getBytes(StandardCharsets.UTF_8)));
        return new String(decryptedBytes, StandardCharsets.UTF_8);
    }

    private PrivateKey getPrivateKey(String privateKeyStr) throws Exception {
        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKeyStr);
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(privateKeyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance("AES");
        return keyFactory.generatePrivate(keySpec);
    }